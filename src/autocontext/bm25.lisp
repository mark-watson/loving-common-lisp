;; bm25.lisp NOTE: Generated by Gemini 2.5 Pro in Research Mode
;; A self-contained implementation of the BM25Okapi ranking function.

(defpackage #:bm25
  (:use #:cl)
  (:export #:bm25-index
           #:make-bm25-index
           #:get-top-n))

(in-package #:bm25)

(defclass bm25-index ()
  ((doc-freqs :initarg :doc-freqs :reader doc-freqs)
   (doc-lengths :initarg :doc-lengths :reader doc-lengths)
   (avg-doc-length :initarg :avg-doc-length :reader avg-doc-length)
   (corpus-size :initarg :corpus-size :reader corpus-size)
   (corpus :initarg :corpus :reader corpus)
   (k1 :initarg :k1 :reader k1)
   (b :initarg :b :reader b)))

(defun make-bm25-index (tokenized-corpus &key (k1 1.5) (b 0.75))
  "Creates and initializes a BM25 index from a corpus of tokenized documents."
  (let* ((corpus-size (length tokenized-corpus))
         (doc-lengths (mapcar #'length tokenized-corpus))
         (avg-doc-length (/ (reduce #'+ doc-lengths) corpus-size))
         (doc-freqs (make-hash-table :test 'equal)))
    ;; Calculate document frequencies for each term
    (dolist (doc tokenized-corpus)
      (dolist (term (remove-duplicates doc :test #'string=))
        (incf (gethash term doc-freqs 0))))
    (make-instance 'bm25-index
                   :doc-freqs doc-freqs
                   :doc-lengths doc-lengths
                   :avg-doc-length avg-doc-length
                   :corpus-size corpus-size
                   :corpus tokenized-corpus
                   :k1 k1
                   :b b)))

(defmethod get-top-n ((index bm25-index) query-tokens n)
  "Returns the top N documents from the corpus for a given query."
  (let ((scores (loop for doc in (corpus index)
                      for i from 0
                      collect (cons (score-doc index query-tokens i) i))))
    ;; Sort by score descending
    (let* ((sorted-scores (sort scores #'> :key #'car))
           (top-scores (subseq sorted-scores 0 (min n (length sorted-scores)))))
      ;; Return the original documents, not the tokenized versions
      (mapcar (lambda (score-pair)
                (nth (cdr score-pair) (slot-value index 'corpus)))
              top-scores))))

;;; Internal methods

(defmethod inverse-document-frequency ((index bm25-index) term)
  "Calculates the IDF for a given term."
  (let* ((doc-freq (gethash term (doc-freqs index) 0))
         (corpus-size (corpus-size index)))
    (log (/ (- corpus-size doc-freq 0.5) (+ doc-freq 0.5)) 10)))

(defmethod score-doc ((index bm25-index) query-tokens doc-index)
  "Calculates the BM25 score for a single document."
  (let* ((k1 (k1 index))
         (b (b index))
         (doc-length (nth doc-index (doc-lengths index)))
         (doc (nth doc-index (corpus index)))
         (avg-dl (avg-doc-length index))
         (score 0.0))
    (dolist (term query-tokens)
      (let* ((term-freq (count term doc :test #'string=))
             (idf (inverse-document-frequency index term)))
        (incf score (* idf (/ (* term-freq (+ k1 1))
                               (+ term-freq (* k1 (- 1 b (* b (/ doc-length avg-dl))))))))))
    score))
